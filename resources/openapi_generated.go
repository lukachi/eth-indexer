// Package resources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package resources

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Block defines model for Block.
type Block struct {
	Hash       *string `json:"hash,omitempty"`
	Number     *int    `json:"number,omitempty"`
	ParentHash *string `json:"parentHash,omitempty"`
	Timestamp  *int    `json:"timestamp,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	BlockNumber *int    `json:"blockNumber,omitempty"`
	From        *string `json:"from,omitempty"`
	Hash        *string `json:"hash,omitempty"`
	To          *string `json:"to,omitempty"`
	Value       *string `json:"value,omitempty"`
}

// GetBlockParams defines parameters for GetBlock.
type GetBlockParams struct {
	Number int `form:"number" json:"number"`
}

// GetTransactionParams defines parameters for GetTransaction.
type GetTransactionParams struct {
	Hash string `form:"hash" json:"hash"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get block data by block number.
	// (GET /v1/block)
	GetBlock(c *gin.Context, params GetBlockParams)
	// Get transaction data by transaction hash.
	// (GET /v1/transaction)
	GetTransaction(c *gin.Context, params GetTransactionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBlock operation middleware
func (siw *ServerInterfaceWrapper) GetBlock(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams

	// ------------- Required query parameter "number" -------------

	if paramValue := c.Query("number"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument number is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "number", c.Request.URL.Query(), &params.Number)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter number: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlock(c, params)
}

// GetTransaction operation middleware
func (siw *ServerInterfaceWrapper) GetTransaction(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionParams

	// ------------- Required query parameter "hash" -------------

	if paramValue := c.Query("hash"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument hash is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "hash", c.Request.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hash: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransaction(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/block", wrapper.GetBlock)
	router.GET(options.BaseURL+"/v1/transaction", wrapper.GetTransaction)
}
