// Package resources provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package resources

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Block defines model for Block.
type Block struct {
	Attributes BlockAttributes `json:"attributes"`
	Id         string          `json:"id"`
	Type       string          `json:"type"`
}

// BlockAttributes defines model for BlockAttributes.
type BlockAttributes struct {
	Hash       string  `json:"hash"`
	Number     float32 `json:"number"`
	ParentHash string  `json:"parentHash"`
	Timestamp  float32 `json:"timestamp"`
}

// Transaction defines model for Transaction.
type Transaction struct {
	Attributes TransactionAttributes `json:"attributes"`
	Id         string                `json:"id"`
	Type       string                `json:"type"`
}

// TransactionAttributes defines model for TransactionAttributes.
type TransactionAttributes struct {
	BlockNumber float32 `json:"blockNumber"`
	From        string  `json:"from"`
	Hash        string  `json:"hash"`
	Timestamp   float32 `json:"timestamp"`
	To          string  `json:"to"`
	Value       string  `json:"value"`
}

// GetBlockParams defines parameters for GetBlock.
type GetBlockParams struct {
	Number *string `form:"number,omitempty" json:"number,omitempty"`
}

// GetTransactionParams defines parameters for GetTransaction.
type GetTransactionParams struct {
	Hash *string `form:"hash,omitempty" json:"hash,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /block)
	GetBlock(c *gin.Context, params GetBlockParams)

	// (GET /transaction)
	GetTransaction(c *gin.Context, params GetTransactionParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBlock operation middleware
func (siw *ServerInterfaceWrapper) GetBlock(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams

	// ------------- Optional query parameter "number" -------------

	err = runtime.BindQueryParameter("form", true, false, "number", c.Request.URL.Query(), &params.Number)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter number: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlock(c, params)
}

// GetTransaction operation middleware
func (siw *ServerInterfaceWrapper) GetTransaction(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionParams

	// ------------- Optional query parameter "hash" -------------

	err = runtime.BindQueryParameter("form", true, false, "hash", c.Request.URL.Query(), &params.Hash)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter hash: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransaction(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/block", wrapper.GetBlock)
	router.GET(options.BaseURL+"/transaction", wrapper.GetTransaction)
}
