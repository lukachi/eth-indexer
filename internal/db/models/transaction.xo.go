package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Transaction represents a row from 'public.transactions'.
type Transaction struct {
	Hash        string `json:"hash"`         // hash
	From        string `json:"from"`         // from
	To          string `json:"to"`           // to
	Value       string `json:"value"`        // value
	BlockNumber int64  `json:"block_number"` // block_number
	Timestamp   int64  `json:"timestamp"`    // timestamp
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Transaction] exists in the database.
func (t *Transaction) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Transaction] has been marked for deletion
// from the database.
func (t *Transaction) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Transaction] to the database.
func (t *Transaction) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.transactions (` +
		`hash, from, to, value, block_number, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, t.Hash, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp)
	if _, err := db.ExecContext(ctx, sqlstr, t.Hash, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Transaction] in the database.
func (t *Transaction) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.transactions SET ` +
		`from = $1, to = $2, value = $3, block_number = $4, timestamp = $5 ` +
		`WHERE hash = $6`
	// run
	logf(sqlstr, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp, t.Hash)
	if _, err := db.ExecContext(ctx, sqlstr, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp, t.Hash); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Transaction] to the database.
func (t *Transaction) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Transaction].
func (t *Transaction) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.transactions (` +
		`hash, from, to, value, block_number, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (hash) DO ` +
		`UPDATE SET ` +
		`from = EXCLUDED.from, to = EXCLUDED.to, value = EXCLUDED.value, block_number = EXCLUDED.block_number, timestamp = EXCLUDED.timestamp `
	// run
	logf(sqlstr, t.Hash, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp)
	if _, err := db.ExecContext(ctx, sqlstr, t.Hash, t.From, t.To, t.Value, t.BlockNumber, t.Timestamp); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Transaction] from the database.
func (t *Transaction) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.transactions ` +
		`WHERE hash = $1`
	// run
	logf(sqlstr, t.Hash)
	if _, err := db.ExecContext(ctx, sqlstr, t.Hash); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TransactionByHash retrieves a row from 'public.transactions' as a [Transaction].
//
// Generated from index 'transactions_pkey'.
func TransactionByHash(ctx context.Context, db DB, hash string) (*Transaction, error) {
	// query
	const sqlstr = `SELECT ` +
		`hash, from, to, value, block_number, timestamp ` +
		`FROM public.transactions ` +
		`WHERE hash = $1`
	// run
	logf(sqlstr, hash)
	t := Transaction{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, hash).Scan(&t.Hash, &t.From, &t.To, &t.Value, &t.BlockNumber, &t.Timestamp); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// Block returns the Block associated with the [Transaction]'s (BlockNumber).
//
// Generated from foreign key 'fk_block'.
func (t *Transaction) Block(ctx context.Context, db DB) (*Block, error) {
	return BlockByNumber(ctx, db, t.BlockNumber)
}
