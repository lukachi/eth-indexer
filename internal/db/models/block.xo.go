// Package models contains generated code for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Block represents a row from 'public.blocks'.
type Block struct {
	Number     int64  `json:"number"`      // number
	Hash       string `json:"hash"`        // hash
	ParentHash string `json:"parent_hash"` // parent_hash
	Timestamp  int64  `json:"timestamp"`   // timestamp
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Block] exists in the database.
func (b *Block) Exists() bool {
	return b._exists
}

// Deleted returns true when the [Block] has been marked for deletion
// from the database.
func (b *Block) Deleted() bool {
	return b._deleted
}

// Insert inserts the [Block] to the database.
func (b *Block) Insert(ctx context.Context, db DB) error {
	switch {
	case b._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case b._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.blocks (` +
		`number, hash, parent_hash, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, b.Number, b.Hash, b.ParentHash, b.Timestamp)
	if _, err := db.ExecContext(ctx, sqlstr, b.Number, b.Hash, b.ParentHash, b.Timestamp); err != nil {
		return logerror(err)
	}
	// set exists
	b._exists = true
	return nil
}

// Update updates a [Block] in the database.
func (b *Block) Update(ctx context.Context, db DB) error {
	switch {
	case !b._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case b._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.blocks SET ` +
		`hash = $1, parent_hash = $2, timestamp = $3 ` +
		`WHERE number = $4`
	// run
	logf(sqlstr, b.Hash, b.ParentHash, b.Timestamp, b.Number)
	if _, err := db.ExecContext(ctx, sqlstr, b.Hash, b.ParentHash, b.Timestamp, b.Number); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Block] to the database.
func (b *Block) Save(ctx context.Context, db DB) error {
	if b.Exists() {
		return b.Update(ctx, db)
	}
	return b.Insert(ctx, db)
}

// Upsert performs an upsert for [Block].
func (b *Block) Upsert(ctx context.Context, db DB) error {
	switch {
	case b._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.blocks (` +
		`number, hash, parent_hash, timestamp` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (number) DO ` +
		`UPDATE SET ` +
		`hash = EXCLUDED.hash, parent_hash = EXCLUDED.parent_hash, timestamp = EXCLUDED.timestamp `
	// run
	logf(sqlstr, b.Number, b.Hash, b.ParentHash, b.Timestamp)
	if _, err := db.ExecContext(ctx, sqlstr, b.Number, b.Hash, b.ParentHash, b.Timestamp); err != nil {
		return logerror(err)
	}
	// set exists
	b._exists = true
	return nil
}

// Delete deletes the [Block] from the database.
func (b *Block) Delete(ctx context.Context, db DB) error {
	switch {
	case !b._exists: // doesn't exist
		return nil
	case b._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.blocks ` +
		`WHERE number = $1`
	// run
	logf(sqlstr, b.Number)
	if _, err := db.ExecContext(ctx, sqlstr, b.Number); err != nil {
		return logerror(err)
	}
	// set deleted
	b._deleted = true
	return nil
}

// BlockByNumber retrieves a row from 'public.blocks' as a [Block].
//
// Generated from index 'blocks_pkey'.
func BlockByNumber(ctx context.Context, db DB, number int64) (*Block, error) {
	// query
	const sqlstr = `SELECT ` +
		`number, hash, parent_hash, timestamp ` +
		`FROM public.blocks ` +
		`WHERE number = $1`
	// run
	logf(sqlstr, number)
	b := Block{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, number).Scan(&b.Number, &b.Hash, &b.ParentHash, &b.Timestamp); err != nil {
		return nil, logerror(err)
	}
	return &b, nil
}
